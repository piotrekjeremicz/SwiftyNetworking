//
//  URLResponse+Extension.swift
//  SwiftyNetworking
//
//  Created by Piotrek Jeremicz on 10.10.2025.
//

#if canImport(Foundation)
import Foundation

// TODO: Refactor - generated by LLM
public extension URLResponse {
    var responseDescription: String {
        // Default to HTTP/1.1 when version is unknown
        let httpVersion = "HTTP/1.1"

        // Build status line and headers if we have HTTPURLResponse
        if let http = self as? HTTPURLResponse {
            let statusCode = http.statusCode
            let reason = HTTPURLResponse.localizedString(forStatusCode: statusCode).capitalized

            var lines: [String] = []
            lines.append("\(httpVersion) \(statusCode) \(reason)")

            // Headers (sorted for deterministic output)
            let headers = http.allHeaderFields
            if !headers.isEmpty {
                // Convert keys to String consistently
                let headerPairs: [(String, String)] = headers.compactMap { key, value in
                    let keyString = String(describing: key)
                    let valueString = String(describing: value)
                    return (keyString, valueString)
                }
                .sorted { lhs, rhs in
                    lhs.0.localizedCaseInsensitiveCompare(rhs.0) == .orderedAscending
                }

                for (key, value) in headerPairs {
                    // Normalize common header capitalization (optional minimal normalization)
                    lines.append("\(key): \(value)")
                }
            }

            // Blank line; body intentionally omitted here
            return lines.joined(separator: "\n") + "\n\n"
        }

        // Non-HTTP responses: provide a minimal description
        var lines: [String] = []
        lines.append("\(httpVersion) 200 OK")

        // Include MIME type and expected content length if available
        if let mime = self.mimeType, !mime.isEmpty {
            lines.append("Content-Type: \(mime)")
        }
        if expectedContentLength > 0 {
            lines.append("Content-Length: \(expectedContentLength)")
        }

        // Add URL host as Server hint if present
        if let host = self.url?.host {
            lines.append("Server: \(host)")
        }

        return lines.joined(separator: "\n") + "\n\n"
    }
}
#endif
